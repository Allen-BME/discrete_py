def cyclic_sub_in_Zn(n, a):
    """
    Return the cyclic subgroup of Z_n generated by a.
    """
    cyc = {a*i % n for i in range(n)}
    if 0 in cyc:
        return cyc
    else:
        return None


def order_sequence_of_Zn(n):
    """
    Return the sequence of orders of the cyclic subgroups of Z_n.
    """
    return sorted([len(cyclic_sub_in_Zn(n, a)) for a in range(n)])


def main():
    """
    Test the functions.
    """
    n = 8
    for a in range(n):
        print(f"Z_{n} generated by {a}: {cyclic_sub_in_Zn(n, a)}")
    print(f"Order sequence of Z_{n}: {order_sequence_of_Zn(n)}")


if __name__ == "__main__":
    main()
